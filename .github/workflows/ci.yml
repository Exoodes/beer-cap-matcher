name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Write .env from secret
        run: |
          printf '%s' "${{ secrets.ENV_FILE }}" > .env

      - name: Start test services
        run: |
          docker compose -f docker-compose.test.yml up -d
          echo "Waiting for services to be healthy..."
          # Try API health for up to ~120s (adjust URL/port if different)
          for i in {1..60}; do
            if curl -fsS http://localhost:8000/health >/dev/null 2>&1; then
              echo "Services ready."
              break
            fi
            sleep 2
          done

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit mypy pytest-cov
          pip install -r requirements.txt

      - name: Run pre-commit
        run: pre-commit run --show-diff-on-failure --color always --all-files

      - name: Run tests
        run: pytest --cov=src --cov-report=xml

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml-${{ matrix.python-version }}
          path: coverage.xml

      - name: Type check
        run: mypy src

      - name: Show service logs on failure
        if: failure()
        run: docker compose -f docker-compose.test.yml logs --no-color

      - name: Stop services
        if: always()
        run: docker compose -f docker-compose.test.yml down -v
